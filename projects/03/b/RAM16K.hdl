// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // 4K x 4 = 16k


    // Get first 2 bits of address - uses load to determine which RAM4K group to load to
    DMux4Way(in=load, sel=address[0..1], a=group0, b=group1, c=group2, d=group3);
    
    // Second part of address selects the Register in the RAM4K group
    RAM4K(in=in, load=group0, address=address[2..13], out=out0);
    RAM4K(in=in, load=group1, address=address[2..13], out=out1);
    RAM4K(in=in, load=group2, address=address[2..13], out=out2);
    RAM4K(in=in, load=group3, address=address[2..13], out=out3);

    // Use Mux to select correct RAM group + address to output
    Mux4Way16(a=out0, b=out1, c=out2, d=out3, sel=address[0..1], out=out);
}
