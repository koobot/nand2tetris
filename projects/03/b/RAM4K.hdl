// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM4K.hdl

/**
 * Memory of 4K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    // 512 x 8 = 4,096


    // Get first 3 bits of address - uses load to determine which RAM512 group to load to
    DMux8Way(in=load, sel=address[0..2], a=group0, b=group1, c=group2, d=group3, e=group4, f=group5, g=group6, h=group7);
    
    // Second part of address selects the Register in the RAM512 group
    RAM512(in=in, load=group0, address=address[3..11], out=out0);
    RAM512(in=in, load=group1, address=address[3..11], out=out1);
    RAM512(in=in, load=group2, address=address[3..11], out=out2);
    RAM512(in=in, load=group3, address=address[3..11], out=out3);
    RAM512(in=in, load=group4, address=address[3..11], out=out4);
    RAM512(in=in, load=group5, address=address[3..11], out=out5);
    RAM512(in=in, load=group6, address=address[3..11], out=out6);
    RAM512(in=in, load=group7, address=address[3..11], out=out7);

    // Use Mux to select correct RAM group + address to output
    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address[0..2], out=out);
}
